void main() {

    int[][] votes =
            new int[][] {
                {1, 2, 3},
                {1, 2, 3},
                {1, 2, 3},
                {1, 2, 3},
                {1, 2, 3}
            };

    int[][] votes1 =
            new int[][] {
                {1, 3, 0},
                {0, 0, 0},
                {2, 1, 0},
                {3, 2, 1},
                {0, 0, 0}
            };

    int[][] votes2 =
            new int[][] {
                {1, 3, 2},
                {2, 3, 0},
                {2, 3, 0},
                {3, 1, 2},
                {2, 1, 0}
            };

    int[][] votes3 =
            new int[][] {
                {1, 2, 3},
                {2, 2, 3},
                {3, 1, 3},
                {3, 1, 3},
                {0, 0, 0}
            };

    int elected = election(votes, 3);
    println("\n---\n");
    int elected1 = election(votes1, 3);
    println("\n---\n");
    int elected2 = election(votes2, 3);
    println("\n---\n");
    int elected3 = election(votes3, 3);

    println("Le gagnant des elections est le candidat '" + elected + "'");
    println("Le gagnant des elections est le candidat '" + elected1 + "'");
    println("Le gagnant des elections est le candidat '" + elected2 + "'");
    println("Le gagnant des elections est le candidat '" + elected3 + "'");
}

void print2DArray(int[][] array) {
    println("[");
    for (int[] line : array) {
        print(" [");
        for (int i = 0; i < line.length; i++) {
            print(line[i] + (i == line.length - 1 ? "" : ", "));
        }
        println("]");
    }
    println("]");
}

boolean candidatsEx(int[][] votes, int nbcandidats) {
    for (int[] person : votes) {
        for (int vote : person) {
            if (vote > nbcandidats || vote < 0) {
                return false;
            }
        }
    }

    return true;
}

boolean uniquePref(int[][] votes, int candidat) {
    for (int[] person : votes) {
        boolean alreadyFound = false;

        for (int vote : person) {
            if (vote == candidat) {
                if (alreadyFound) {
                    return false;
                }

                alreadyFound = true;
            }
        }
    }

    return true;
}

boolean prefCorrect(int[][] votes) {
    for (int[] person : votes) {
        boolean previousZero = false;

        for (int vote : person) {
            if (vote != 0 && previousZero) {
                return false;
            } else if (vote == 0) {
                previousZero = true;
            }
        }
    }

    return true;
}

boolean verifieVote(int[][] votes, int nbcandidats) {
    for (int i = 1; i <= nbcandidats; i++) {
        if (!uniquePref(votes, i)) {
            return false;
        }
    }

    return candidatsEx(votes, nbcandidats) && prefCorrect(votes);
}

// Exercice 2
int compteVote(int[][] votes, int candidat) {
    int counter = 0;

    for (int[] person : votes) {
        if (person[0] == candidat) {
            counter++;
        }
    }

    return counter;
}

int gagnant(int[][] votes, int nbcandidats) {
    int n = votes.length; // Nombre de personnes qui ont votÃ©
    int reach = (n / 2) + 1;

    for (int i = 1; i <= nbcandidats; i++) {
        if (compteVote(votes, i) >= reach) {
            return i;
        }
    }

    return 0;
}

void efface(int[][] votes, int candidat, int electeur) {

    boolean found = false;

    for (int i = 0; i < votes[electeur].length; i++) {
        if (found) {
            votes[electeur][i] = (i == votes[electeur].length - 1 ? 0 : votes[electeur][i + 1]);
        } else {
            if (votes[electeur][i] == candidat) {
                found = true;
                i--; // Pour permettre au prochain tour de remplacer par la valeur suivante
            }
        }
    }
}

void efface(int[][] votes, int candidat) {
    for (int i = 0; i < votes.length; i++) {
        efface(votes, candidat, i);
    }
}

void effaceZero(int[][] votes, int nbcandidats) {
    for (int candidat = 1; candidat <= nbcandidats; candidat++) {
        boolean found = false;
        for (int i = 0; i < votes.length && !found; i++) {
            found = (votes[i][0] == candidat);
        }

        if (!found) {
            efface(votes, candidat);
        }
    }
}

int perdant(int[][] votes, int nbcandidats) {
    int minCandidat = 0;
    int minVoice = -1;

    for (int i = 2; i <= nbcandidats; i++) {
        int voice = compteVote(votes, i);

        if (voice > 0 && (minVoice < 0 || voice < minVoice)) {
            minCandidat = i;
            minVoice = voice;
        }
    }

    return minCandidat;
}

int election(int[][] votes, int nbcandidats) {
    effaceZero(votes, nbcandidats);

    int gagnant = gagnant(votes, nbcandidats);

    while (gagnant == 0) {
        efface(votes, perdant(votes, nbcandidats));
        print2DArray(votes); // Pour debug
        gagnant = gagnant(votes, nbcandidats);
    }

    return gagnant;
}
